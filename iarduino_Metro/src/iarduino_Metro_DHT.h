																										//
#ifndef iarduino_Metro_DHT_h																			//	Функции работы с датчиком влажности и температуры.
#define iarduino_Metro_DHT_h																			//
																										//
class iarduino_Metro_DHT: public iarduino_Metro_BASE{													//	Определяем производный класс iarduino_Metro_DHT.
	public:																								//
	/**	функции данного производного класса iarduino_Metro_DHT		**/									//
	/**	дублирую функции полиморфного класса iarduino_Metro_BASE	**/									//
																										//
//		Функции не используемые в данном модуле:														//
		bool	begin			(int i0=NOT2, int i1=NOT2	){return 0;}								//	Инициализация модуля.
		int		test			(int i0=NOT2, int i1=NOT2	){return 0;}								//	Самотестирование модуля.
																										//
//		Выполняем действия:																				//
		bool	action			(int i0=NOT2, int i1=NOT2	){											//	Объявляем функцию выполнения действий.
								uint8_t data[5] = {0,0,0,0,0};											//	Определяем массив для хранения данных пакетно считываемых/записываемых в модуль.
								bool    result  = false;												//	Определяем флаг результата возвращаемый функцией action.
								uint8_t sumtry  = 10;													//	Количество попыток чтения/записи.
								switch(i0){																//
								//	Действие № 0 - установить значения TEM_CHANGE и HUM_TEM_CHANGE:		//
									case 0:																//
										data[0]		 =	uint8_t(tem_change*10);							//	Определяем температуру (в десятых долях градуса:  от 0.0 до 25.0 °С ), при изменении TEM на которое, установится флаг CHANGED_TEM.
										data[1]		 =	uint8_t(hum_change*10);							//	Определяем влажность   (в десятых долях процента: от 0.0 до 25.0 %  ), при изменении HUM на которое, установится флаг CHANGED_HUM.
										do{	result	 =	objI2C.writeBytes( i1, REG_DATA+5, data, 2);	//	Записываем 2 элемента массива data в модуль с адресом i1, начиная с регистра REG_DATA+5.
											sumtry	--;	if(!result){delay(1);}							//	Уменьшаем количество попыток записи и устанавливаем задержку при неудаче.
										}	while		(!result && sumtry>0);							//	Повторяем запись если она завершилось неудачей, но не более sumtry попыток.
									break;																//
								//	Действие № 1 - прочитать данные из датчика:							//
									case 1:																//
										do{	result	 =	objI2C.readBytes( i1, REG_DATA, data, 5);		//	Читаем 5 байт из модуля с адресом i1, начиная с регистра REG_DATA в массив data.
											sumtry	--;	if(!result){delay(1);}							//	Уменьшаем количество попыток чтения и устанавливаем задержку при неудаче.
										}	while		(!result && sumtry>0);							//	Повторяем чтение если оно завершилось неудачей, но не более sumtry попыток.
										tem_last	 =	tem;											//	Сохраняем предыдущее значение температуры.
										hum_last	 =	hum;											//	Сохраняем предыдущее значение влажности.
										changed_tem	|=	bool		(	data[0] &  bit(1)	);			//	Устанавливаем флаг (не сбрасывая его) если температура изменилась более чем на tem_change градусов.
										changed_hum	|=	bool		(	data[0] &  bit(2)	);			//	Устанавливаем флаг (не сбрасывая его) если влажность   изменилась более чем на hum_change процентов.
										tem			 =	int			(	data[1]				);			//	Сохраняем младший байт температуры.
										hum			 =	int			(	data[3]				);			//	Сохраняем младший байт влажности.
										tem			|=	int			(	data[2]	& ~bit(7)	) << 8;		//	Сохраняем старший байт температуры, без учёта 7 бита.
										hum			|=	int			(	data[4]				) << 8;		//	Сохраняем старший байт влажности.
										tem			+=				(	tem%10  >= 5		)?10:0;		//	Переменная tem содержит температуру в десятых долях градуса  (255 = 25,5°С). Если младшая цифра >= 5, то округлять температуру нужно в большую сторону, так что добавляем 10 = 1,0°С.
										hum			+=				(	hum%10  >= 5		)?10:0;		//	Переменная hum содержит влажность   в десятых долях процента (503 = 50,3 %). Если младшая цифра >= 5, то округлять влажность   нужно в большую сторону, так что добавляем 10 = 1,0 %.
										tem			*=				(	data[2]	&  bit(7)	)?-1:1;		//	Добавляем знак температуры (если 7 бит старшего байта установлен, значит температура отрицательная).
										tem			/=	10;												//	Приводим температуру к значению в °C, так как модуль отдаёт температуру в десятых долях градуса.
										hum			/=	10;												//	Приводим влажность   к значению в  %, так как модуль отдаёт влажность   в десятых долях процента.
									//	Устранение ложных пиков в показаниях датчика:					//
										if(tem<-40)				{tem=tem_last;}							//	Температура не может быть ниже -40.0 °С (это порог допустимого диапазона датчика по datasheet).
										if(tem> 80)				{tem=tem_last;}							//	Температура не может быть выше +80.0 °С (это порог допустимого диапазона датчика по datasheet).
										if(hum<  0)				{hum=hum_last;}							//	Влажность не может быть ниже 0 %.
										if(hum>100)				{hum=hum_last;}							//	Влажность не может быть выше 100.0 %.
									//	Устранение повторных срабатываний флагов						//	Если проверить флаг в условии if() а потом прочитать данные, то флаг будет прочтён и в условии и при чтении данных, а значит сработает при следующем проходе цикла.
										if(changed_tem | changed_hum){delay(20);}						//	Если установлен флаг changed_tem «изменилась температура» или changed_hum «изменилась влажность», то ждём 20 мс. В течении этого времени указанный(ые) бит(ы) будет сброшен в модуле.
									break;																//
								}																		//
								return result;															//
		}																								//
																										//
//		Получаем значение переменных:																	//
		void	setVar			(int i0=NOT2, int i1=NOT2	){											//
								switch(i0){																//
									case 0: tem_change = i1; break;										//	Получаем температуру требуемую для установки флага CHANGED_TEM:	0 ... 25 = 0 ... 25,0 °C.
									case 1: hum_change = i1; break;										//	Получаем влажность   требуемую для установки флага CHANGED_HUM:	0 ... 25 = 0 ... 25,0  %.
								}																		//
		}																								//
																										//
//		Возвращаем значение переменных:																	//
		long	getVar			(int i0=NOT2){															//
								bool f=0;																//	Объявляем временную переменную для вывода флагов, значение которых должно обнуляться после вывода.
								switch(i0){																//
									case 0:	f=changed_tem; changed_tem=0;	return long(f);		break;	//  Возвращаем флаг указывающий что температура изменилась более чем на tem_change градусов.  Флаг changed_tem сбрасывается после отправки своего значения.
									case 1:	f=changed_hum; changed_hum=0;	return long(f);		break;	//  Возвращаем флаг указывающий что влажность   изменилась более чем на hum_change процентов. Флаг changed_hum сбрасывается после отправки своего значения.
									case 2:									return long(tem);	break;	//	Возвращаем значение температуры.
									case 3:									return long(hum);	break;	//	Возвращаем значение влажности.
									default:								return 0;			break;	//
								}																		//
		}																								//
																										//
	private:																							//
	/**	Внутренние переменные **/																		//
		int		tem;																					//	Объявляем переменную для хранения температуры:																		0 ... 100,0 °C.
		int		hum;																					//	Объявляем переменную для хранения влажности:																		0 ... 100,0  %.
		int		tem_change;																				//	Объявляем переменную для хранения температуры, при изменении на которую установится флаг CHANGED_TEM:	0 ... 25 =	0 ...  25,0 °C.
		int		hum_change;																				//	Объявляем переменную для хранения влажности,   при изменении на которую установится флаг CHANGED_HUM:	0 ... 25 =	0 ...  25,0  %.
		bool	changed_tem;																			//	Объявляем переменную для хранения флага указывающего на изменение температуры.
		bool	changed_hum;																			//	Объявляем переменную для хранения флага указывающего на изменение влажности.
		int		tem_last;																				//	Объявляем переменную для хранения предыдущего значения температуры.
		int		hum_last;																				//	Объявляем переменную для хранения предыдущего значения влажности.
};																										//
																										//
#endif																									//

/* =======================================================================================================================================================================================================

Действия функций библиотеки:

read( [ параметр     ] )               - считывает все данные с датчика, а возвращаемое значение зависит от параметра функции (по умолчанию DHT_TEMPERATURE):
        DHT_TEMPERATURE                - вернуть значение TEM         регистров REG_DATA+1 и REG_DATA+2. Это значение температуры в °С.
        DHT_HUMIDITY                   - вернуть значение HUM         регистров REG_DATA+3 и REG_DATA+4. Это значение влажности в %.
        DHT_CHANGED_TEM                - вернуть флаг     CHANGED_TEM регистра  REG_DATA. Если данный флаг был установлен ранее, но не был прочитан, то функция read( DHT_CHANGED_TEM ) вернёт 1 вне зависимости от текущего значения флага CHANGED_TEM.
        DHT_CHANGED_HUM                - вернуть флаг     CHANGED_HUM регистра  REG_DATA. Если данный флаг был установлен ранее, но не был прочитан, то функция read( DHT_CHANGED_HUM ) вернёт 1 вне зависимости от текущего значения флага CHANGED_HUM.
set( температура, влажность )          - установка температуры и влажности для срабатывания флагов TEM_CHANGE, HUM_CHANGE. Температура указывается от 1 до 25 °С, влажность указывается от 1 до 25 %.
                                         TEM_CHANGE = температура * 10
                                         HUM_CHANGE = влажность   * 10

Таблица регистров модуля:

                   ╔══════════════╤══════════════╤══════════════╤══════════════╤══════════════╤══════════════╤══════════════╤══════════════╤═════════════════════════════════════════════════════════════╗
                   ║       7      │       6      │       5      │       4      │       3      │       2      │       1      │       0      │                                                             ║
                   ╠══════════════╪══════════════╪══════════════╪══════════════╪══════════════╪══════════════╪══════════════╪══════════════╪═════════════════════════════════════════════════════════════╣
0x00 REG_FLAGS_0   ║  FLG_RESET   │FLG_SELF_TEST │       -      │       -      │       -      │       -      │GET_PIN_ADDRES│GET_PIN_OUTPUT│ Служебные флаги для чтения.                                 ║
0x01 REG_BITS_0    ║  SET_RESET   │SET_SELF_TEST │       -      │       -      │       -      │       -      │       -      │SET_PIN_OUTPUT│ Служебные флаги для записи.                                 ║
0x02 REG_FLAGS_1   ║       -      │       -      │       -      │       -      │       -      │       -      │       -      │       -      │ Служебные флаги для чтения.                                 ║
0x03 REG_BITS_1    ║       -      │       -      │       -      │       -      │       -      │       -      │       -      │       -      │ Служебные флаги для записи.                                 ║
                   ╟──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┼─────────────────────────────────────────────────────────────╢
0x04 REG_MODEL   █ ║                                                             MODEL  [7-0] = 0x05 - датчик влажности и температуры DHT  │ Тип датчика                                                 ║
0x05 REG_VERSION   ║                                                             VERSION[7-0] = 0x00                                       │ Версия прошивки                                             ║
0x06 REG_ADDRESS   ║                                                             ADDRESS[6-0] = 0x09                        │ IF_PIN_ADDRES│ Текущий адрес на шине                                       ║
0x07 REG_CHIP_ID   ║                                                             CHIP_ID[7-0] = 0xC3                                       │ ID линейки чипов                                            ║
                   ╟───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────╢
0x08 REG_WRITE   █ ║                                                             PERIOD[7-0]  = 0x1E = 30 = 3,0 сек                        │ Период опроса датчика (в десятых долях секунд)              ║
0x09 REG_WRITE+1   ║                                                             WRITE_1[7-0]                                              │ Зарезервирован                                              ║
0x0A REG_WRITE+2   ║                                                             WRITE_2[7-0]                                              │ Зарезервирован                                              ║
0x0B REG_WRITE+3   ║                                                             WRITE_3[7-0]                                              │ Зарезервирован                                              ║
0x0C REG_WRITE+4   ║                                                             WRITE_4[7-0]                                              │ Зарезервирован                                              ║
0x0D REG_WRITE+5   ║                                                             WRITE_5[7-0]                                              │ Зарезервирован                                              ║
0x0E REG_WRITE+6   ║                                                             WRITE_6[7-0]                                              │ Зарезервирован                                              ║
0x0F REG_WRITE+7   ║                                                             WRITE_7[7-0]                                              │ Зарезервирован                                              ║
                   ╟──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────┼─────────────────────────────────────────────────────────────╢
0x10 REG_DATA    █ ║       -      │       -      │       -      │       -      │       -      │  CHANGED_HUM │  CHANGED_TEM │    CHANGED   │ Статусные флаги                                             ║
                 █ ╟──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┼─────────────────────────────────────────────────────────────╢
0x11 REG_DATA+1  █ ║                                                             TEM[7-0]                                                  │ Значение температуры (младшие биты).          t = TEM/10 °C ║
0x12 REG_DATA+2  █ ║   NEGATIVE   │                                              TEM[14-8]                                                 │ Значение температуры (старшие биты). NEGATIVE флаг отр. тем.║
0x13 REG_DATA+3  █ ║                                                             HUM[7-0]                                                  │ Значение влажности   (младшие биты).         RH = HUM/10 %  ║
0x14 REG_DATA+4  █ ║                                                             HUM[15-8]                                                 │ Значение влажности   (старшие биты).                        ║
0x15 REG_DATA+5  █ ║                                                             TEM_CHANGE[7-0] = 0x0A = 10 = 1,0°C                       │ Если TEM изм. более чем на TEM_CHANGE то уст-ся CHANGED_TEM ║ (в десятых долях градуса)
0x16 REG_DATA+6  █ ║                                                             HUM_CHANGE[7-0] = 0x0A = 10 = 1,0 %                       │ Если HUM изм. более чем на HUM_CHANGE то уст-ся CHANGED_HUM ║ (в десятых долях процента)
                   ╚═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╧═════════════════════════════════════════════════════════════╝
				   
PERIOD           - Период опроса датчика (в десятых долях секунд: от 0.1 до 25.5 сек.).
CHANGED_HUM      - флаг указывающий на то, что показания влажности   изменились на более чем «HUM_CHANGE» значений с момента последней установки флага «CHANGED_HUM». Флаг сбрасывается аппаратно после чтения регистра REG_DATA.
CHANGED_TEM      - флаг указывающий на то, что показания температуры изменились на более чем «TEM_CHANGE» значений с момента последней установки флага «CHANGED_TEM». Флаг сбрасывается аппаратно после чтения регистра REG_DATA.
CHANGED          - флаг указывает что установлен флаг CHANGED_HUM или CHANGED_TEM.                                                                                    Флаг сбрасывается аппаратно после чтения регистра REG_DATA.
NEGATIVE         - Флаг отрицательного знака температуры TEM[14-0].
TEM              - Значение температуры (в десятых долях градуса:  от 0.0 до 80.0 °С ).
HUM              - Значение влажности   (в десятых долях процента: от 0.0 до 99.9  % ).
TEM_CHANGE       - Значение температуры (в десятых долях градуса:  от 0.0 до 25.5 °С ), при изменении TEM на которое, установится флаг CHANGED_TEM.
HUM_CHANGE       - Значение влажности   (в десятых долях процента: от 0.0 до 25.5  % ), при изменении HUM на которое, установится флаг CHANGED_HUM.

*/